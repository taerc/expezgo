// Code generated by ent, DO NOT EDIT.

package ent

import (
	"expezgo/pkg/ent/city"
	"expezgo/pkg/ent/county"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// County is the model entity for the County schema.
type County struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type uint32 `json:"type,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid uint32 `json:"pid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CountyQuery when eager-loading is set.
	Edges        CountyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CountyEdges holds the relations/edges for other nodes in the graph.
type CountyEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CountyEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*County) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case county.FieldID, county.FieldType, county.FieldPid:
			values[i] = new(sql.NullInt64)
		case county.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the County fields.
func (c *County) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case county.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint32(value.Int64)
		case county.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case county.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = uint32(value.Int64)
			}
		case county.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				c.Pid = uint32(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the County.
// This includes values selected through modifiers, order, etc.
func (c *County) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the County entity.
func (c *County) QueryCity() *CityQuery {
	return NewCountyClient(c.config).QueryCity(c)
}

// Update returns a builder for updating this County.
// Note that you need to call County.Unwrap() before calling this method if this County
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *County) Update() *CountyUpdateOne {
	return NewCountyClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the County entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *County) Unwrap() *County {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: County is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *County) String() string {
	var builder strings.Builder
	builder.WriteString("County(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", c.Pid))
	builder.WriteByte(')')
	return builder.String()
}

// Counties is a parsable slice of County.
type Counties []*County
