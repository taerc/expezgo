// Code generated by ent, DO NOT EDIT.

package city

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the city type in the database.
	Label = "city"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// EdgeProvinces holds the string denoting the provinces edge name in mutations.
	EdgeProvinces = "provinces"
	// EdgeCounties holds the string denoting the counties edge name in mutations.
	EdgeCounties = "counties"
	// Table holds the table name of the city in the database.
	Table = "city"
	// ProvincesTable is the table that holds the provinces relation/edge.
	ProvincesTable = "city"
	// ProvincesInverseTable is the table name for the Province entity.
	// It exists in this package in order to avoid circular dependency with the "province" package.
	ProvincesInverseTable = "province"
	// ProvincesColumn is the table column denoting the provinces relation/edge.
	ProvincesColumn = "pid"
	// CountiesTable is the table that holds the counties relation/edge.
	CountiesTable = "county"
	// CountiesInverseTable is the table name for the County entity.
	// It exists in this package in order to avoid circular dependency with the "county" package.
	CountiesInverseTable = "county"
	// CountiesColumn is the table column denoting the counties relation/edge.
	CountiesColumn = "pid"
)

// Columns holds all SQL columns for city fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldPid,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint32
)

// OrderOption defines the ordering options for the City queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPid orders the results by the pid field.
func ByPid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPid, opts...).ToFunc()
}

// ByProvincesField orders the results by provinces field.
func ByProvincesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvincesStep(), sql.OrderByField(field, opts...))
	}
}

// ByCountiesCount orders the results by counties count.
func ByCountiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountiesStep(), opts...)
	}
}

// ByCounties orders the results by counties terms.
func ByCounties(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProvincesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvincesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProvincesTable, ProvincesColumn),
	)
}
func newCountiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CountiesTable, CountiesColumn),
	)
}
