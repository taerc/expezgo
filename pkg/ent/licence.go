// Code generated by ent, DO NOT EDIT.

package ent

import (
	"expezgo/pkg/ent/licence"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Licence is the model entity for the Licence schema.
type Licence struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// DevUUID holds the value of the "dev_uuid" field.
	DevUUID string `json:"dev_uuid,omitempty"`
	// LicPath holds the value of the "lic_path" field.
	LicPath string `json:"lic_path,omitempty"`
	// State holds the value of the "state" field.
	State int `json:"state,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime   int64 `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Licence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case licence.FieldID, licence.FieldState, licence.FieldCreateTime:
			values[i] = new(sql.NullInt64)
		case licence.FieldDevUUID, licence.FieldLicPath, licence.FieldTaskID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Licence fields.
func (l *Licence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case licence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int64(value.Int64)
		case licence.FieldDevUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dev_uuid", values[i])
			} else if value.Valid {
				l.DevUUID = value.String
			}
		case licence.FieldLicPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lic_path", values[i])
			} else if value.Valid {
				l.LicPath = value.String
			}
		case licence.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				l.State = int(value.Int64)
			}
		case licence.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				l.TaskID = value.String
			}
		case licence.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				l.CreateTime = value.Int64
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Licence.
// This includes values selected through modifiers, order, etc.
func (l *Licence) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Licence.
// Note that you need to call Licence.Unwrap() before calling this method if this Licence
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Licence) Update() *LicenceUpdateOne {
	return NewLicenceClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Licence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Licence) Unwrap() *Licence {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Licence is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Licence) String() string {
	var builder strings.Builder
	builder.WriteString("Licence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("dev_uuid=")
	builder.WriteString(l.DevUUID)
	builder.WriteString(", ")
	builder.WriteString("lic_path=")
	builder.WriteString(l.LicPath)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", l.State))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(l.TaskID)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", l.CreateTime))
	builder.WriteByte(')')
	return builder.String()
}

// Licences is a parsable slice of Licence.
type Licences []*Licence
