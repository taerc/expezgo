// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/city"
	"expezgo/pkg/ent/county"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountyCreate is the builder for creating a County entity.
type CountyCreate struct {
	config
	mutation *CountyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CountyCreate) SetName(s string) *CountyCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CountyCreate) SetType(u uint32) *CountyCreate {
	cc.mutation.SetType(u)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CountyCreate) SetNillableType(u *uint32) *CountyCreate {
	if u != nil {
		cc.SetType(*u)
	}
	return cc
}

// SetPid sets the "pid" field.
func (cc *CountyCreate) SetPid(u uint32) *CountyCreate {
	cc.mutation.SetPid(u)
	return cc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cc *CountyCreate) SetNillablePid(u *uint32) *CountyCreate {
	if u != nil {
		cc.SetPid(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CountyCreate) SetID(u uint32) *CountyCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetCityID sets the "city" edge to the City entity by ID.
func (cc *CountyCreate) SetCityID(id uint32) *CountyCreate {
	cc.mutation.SetCityID(id)
	return cc
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (cc *CountyCreate) SetNillableCityID(id *uint32) *CountyCreate {
	if id != nil {
		cc = cc.SetCityID(*id)
	}
	return cc
}

// SetCity sets the "city" edge to the City entity.
func (cc *CountyCreate) SetCity(c *City) *CountyCreate {
	return cc.SetCityID(c.ID)
}

// Mutation returns the CountyMutation object of the builder.
func (cc *CountyCreate) Mutation() *CountyMutation {
	return cc.mutation
}

// Save creates the County in the database.
func (cc *CountyCreate) Save(ctx context.Context) (*County, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CountyCreate) SaveX(ctx context.Context) *County {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CountyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CountyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CountyCreate) defaults() {
	if _, ok := cc.mutation.GetType(); !ok {
		v := county.DefaultType
		cc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CountyCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "County.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := county.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "County.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "County.type"`)}
	}
	return nil
}

func (cc *CountyCreate) sqlSave(ctx context.Context) (*County, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CountyCreate) createSpec() (*County, *sqlgraph.CreateSpec) {
	var (
		_node = &County{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(county.Table, sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(county.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(county.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if nodes := cc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   county.CityTable,
			Columns: []string{county.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CountyCreateBulk is the builder for creating many County entities in bulk.
type CountyCreateBulk struct {
	config
	builders []*CountyCreate
}

// Save creates the County entities in the database.
func (ccb *CountyCreateBulk) Save(ctx context.Context) ([]*County, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*County, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CountyCreateBulk) SaveX(ctx context.Context) []*County {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CountyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CountyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
