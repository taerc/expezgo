// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/city"
	"expezgo/pkg/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// Where appends a list predicates to the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetType sets the "type" field.
func (cu *CityUpdate) SetType(u uint32) *CityUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(u)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CityUpdate) SetNillableType(u *uint32) *CityUpdate {
	if u != nil {
		cu.SetType(*u)
	}
	return cu
}

// AddType adds u to the "type" field.
func (cu *CityUpdate) AddType(u int32) *CityUpdate {
	cu.mutation.AddType(u)
	return cu
}

// SetPid sets the "pid" field.
func (cu *CityUpdate) SetPid(u uint32) *CityUpdate {
	cu.mutation.ResetPid()
	cu.mutation.SetPid(u)
	return cu
}

// AddPid adds u to the "pid" field.
func (cu *CityUpdate) AddPid(u int32) *CityUpdate {
	cu.mutation.AddPid(u)
	return cu
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CityUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.Pid(); ok {
		_spec.SetField(city.FieldPid, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedPid(); ok {
		_spec.AddField(city.FieldPid, field.TypeUint32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CityMutation
}

// SetName sets the "name" field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetType sets the "type" field.
func (cuo *CityUpdateOne) SetType(u uint32) *CityUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(u)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableType(u *uint32) *CityUpdateOne {
	if u != nil {
		cuo.SetType(*u)
	}
	return cuo
}

// AddType adds u to the "type" field.
func (cuo *CityUpdateOne) AddType(u int32) *CityUpdateOne {
	cuo.mutation.AddType(u)
	return cuo
}

// SetPid sets the "pid" field.
func (cuo *CityUpdateOne) SetPid(u uint32) *CityUpdateOne {
	cuo.mutation.ResetPid()
	cuo.mutation.SetPid(u)
	return cuo
}

// AddPid adds u to the "pid" field.
func (cuo *CityUpdateOne) AddPid(u int32) *CityUpdateOne {
	cuo.mutation.AddPid(u)
	return cuo
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CityUpdate builder.
func (cuo *CityUpdateOne) Where(ps ...predicate.City) *CityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CityUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "City.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.Pid(); ok {
		_spec.SetField(city.FieldPid, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedPid(); ok {
		_spec.AddField(city.FieldPid, field.TypeUint32, value)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
