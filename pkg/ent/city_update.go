// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/city"
	"expezgo/pkg/ent/county"
	"expezgo/pkg/ent/predicate"
	"expezgo/pkg/ent/province"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks     []Hook
	mutation  *CityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetType sets the "type" field.
func (cu *CityUpdate) SetType(u uint32) *CityUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(u)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CityUpdate) SetNillableType(u *uint32) *CityUpdate {
	if u != nil {
		cu.SetType(*u)
	}
	return cu
}

// AddType adds u to the "type" field.
func (cu *CityUpdate) AddType(u int32) *CityUpdate {
	cu.mutation.AddType(u)
	return cu
}

// SetPid sets the "pid" field.
func (cu *CityUpdate) SetPid(u uint32) *CityUpdate {
	cu.mutation.SetPid(u)
	return cu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cu *CityUpdate) SetNillablePid(u *uint32) *CityUpdate {
	if u != nil {
		cu.SetPid(*u)
	}
	return cu
}

// ClearPid clears the value of the "pid" field.
func (cu *CityUpdate) ClearPid() *CityUpdate {
	cu.mutation.ClearPid()
	return cu
}

// SetProvincesID sets the "provinces" edge to the Province entity by ID.
func (cu *CityUpdate) SetProvincesID(id uint32) *CityUpdate {
	cu.mutation.SetProvincesID(id)
	return cu
}

// SetNillableProvincesID sets the "provinces" edge to the Province entity by ID if the given value is not nil.
func (cu *CityUpdate) SetNillableProvincesID(id *uint32) *CityUpdate {
	if id != nil {
		cu = cu.SetProvincesID(*id)
	}
	return cu
}

// SetProvinces sets the "provinces" edge to the Province entity.
func (cu *CityUpdate) SetProvinces(p *Province) *CityUpdate {
	return cu.SetProvincesID(p.ID)
}

// AddCountyIDs adds the "counties" edge to the County entity by IDs.
func (cu *CityUpdate) AddCountyIDs(ids ...uint32) *CityUpdate {
	cu.mutation.AddCountyIDs(ids...)
	return cu
}

// AddCounties adds the "counties" edges to the County entity.
func (cu *CityUpdate) AddCounties(c ...*County) *CityUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCountyIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearProvinces clears the "provinces" edge to the Province entity.
func (cu *CityUpdate) ClearProvinces() *CityUpdate {
	cu.mutation.ClearProvinces()
	return cu
}

// ClearCounties clears all "counties" edges to the County entity.
func (cu *CityUpdate) ClearCounties() *CityUpdate {
	cu.mutation.ClearCounties()
	return cu
}

// RemoveCountyIDs removes the "counties" edge to County entities by IDs.
func (cu *CityUpdate) RemoveCountyIDs(ids ...uint32) *CityUpdate {
	cu.mutation.RemoveCountyIDs(ids...)
	return cu
}

// RemoveCounties removes "counties" edges to County entities.
func (cu *CityUpdate) RemoveCounties(c ...*County) *CityUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCountyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CityUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CityUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(city.FieldType, field.TypeUint32, value)
	}
	if cu.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvincesTable,
			Columns: []string{city.ProvincesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProvincesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvincesTable,
			Columns: []string{city.ProvincesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CountiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCountiesIDs(); len(nodes) > 0 && !cu.mutation.CountiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CountiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetType sets the "type" field.
func (cuo *CityUpdateOne) SetType(u uint32) *CityUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(u)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableType(u *uint32) *CityUpdateOne {
	if u != nil {
		cuo.SetType(*u)
	}
	return cuo
}

// AddType adds u to the "type" field.
func (cuo *CityUpdateOne) AddType(u int32) *CityUpdateOne {
	cuo.mutation.AddType(u)
	return cuo
}

// SetPid sets the "pid" field.
func (cuo *CityUpdateOne) SetPid(u uint32) *CityUpdateOne {
	cuo.mutation.SetPid(u)
	return cuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillablePid(u *uint32) *CityUpdateOne {
	if u != nil {
		cuo.SetPid(*u)
	}
	return cuo
}

// ClearPid clears the value of the "pid" field.
func (cuo *CityUpdateOne) ClearPid() *CityUpdateOne {
	cuo.mutation.ClearPid()
	return cuo
}

// SetProvincesID sets the "provinces" edge to the Province entity by ID.
func (cuo *CityUpdateOne) SetProvincesID(id uint32) *CityUpdateOne {
	cuo.mutation.SetProvincesID(id)
	return cuo
}

// SetNillableProvincesID sets the "provinces" edge to the Province entity by ID if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableProvincesID(id *uint32) *CityUpdateOne {
	if id != nil {
		cuo = cuo.SetProvincesID(*id)
	}
	return cuo
}

// SetProvinces sets the "provinces" edge to the Province entity.
func (cuo *CityUpdateOne) SetProvinces(p *Province) *CityUpdateOne {
	return cuo.SetProvincesID(p.ID)
}

// AddCountyIDs adds the "counties" edge to the County entity by IDs.
func (cuo *CityUpdateOne) AddCountyIDs(ids ...uint32) *CityUpdateOne {
	cuo.mutation.AddCountyIDs(ids...)
	return cuo
}

// AddCounties adds the "counties" edges to the County entity.
func (cuo *CityUpdateOne) AddCounties(c ...*County) *CityUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCountyIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearProvinces clears the "provinces" edge to the Province entity.
func (cuo *CityUpdateOne) ClearProvinces() *CityUpdateOne {
	cuo.mutation.ClearProvinces()
	return cuo
}

// ClearCounties clears all "counties" edges to the County entity.
func (cuo *CityUpdateOne) ClearCounties() *CityUpdateOne {
	cuo.mutation.ClearCounties()
	return cuo
}

// RemoveCountyIDs removes the "counties" edge to County entities by IDs.
func (cuo *CityUpdateOne) RemoveCountyIDs(ids ...uint32) *CityUpdateOne {
	cuo.mutation.RemoveCountyIDs(ids...)
	return cuo
}

// RemoveCounties removes "counties" edges to County entities.
func (cuo *CityUpdateOne) RemoveCounties(c ...*County) *CityUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCountyIDs(ids...)
}

// Where appends a list predicates to the CityUpdate builder.
func (cuo *CityUpdateOne) Where(ps ...predicate.City) *CityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CityUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CityUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "City.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(city.FieldType, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(city.FieldType, field.TypeUint32, value)
	}
	if cuo.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvincesTable,
			Columns: []string{city.ProvincesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProvincesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvincesTable,
			Columns: []string{city.ProvincesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CountiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCountiesIDs(); len(nodes) > 0 && !cuo.mutation.CountiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CountiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CountiesTable,
			Columns: []string{city.CountiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(county.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
