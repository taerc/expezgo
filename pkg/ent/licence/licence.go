// Code generated by ent, DO NOT EDIT.

package licence

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the licence type in the database.
	Label = "licence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDevUUID holds the string denoting the dev_uuid field in the database.
	FieldDevUUID = "dev_uuid"
	// FieldLicPath holds the string denoting the lic_path field in the database.
	FieldLicPath = "lic_path"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the licence in the database.
	Table = "lic_sn"
)

// Columns holds all SQL columns for licence fields.
var Columns = []string{
	FieldID,
	FieldDevUUID,
	FieldLicPath,
	FieldState,
	FieldTaskID,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DevUUIDValidator is a validator for the "dev_uuid" field. It is called by the builders before save.
	DevUUIDValidator func(string) error
	// LicPathValidator is a validator for the "lic_path" field. It is called by the builders before save.
	LicPathValidator func(string) error
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultTaskID holds the default value on creation for the "task_id" field.
	DefaultTaskID string
	// TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	TaskIDValidator func(string) error
)

// OrderOption defines the ordering options for the Licence queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDevUUID orders the results by the dev_uuid field.
func ByDevUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevUUID, opts...).ToFunc()
}

// ByLicPath orders the results by the lic_path field.
func ByLicPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicPath, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
