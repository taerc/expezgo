// Code generated by ent, DO NOT EDIT.

package licence

import (
	"expezgo/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldID, id))
}

// DevUUID applies equality check predicate on the "dev_uuid" field. It's identical to DevUUIDEQ.
func DevUUID(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldDevUUID, v))
}

// LicPath applies equality check predicate on the "lic_path" field. It's identical to LicPathEQ.
func LicPath(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldLicPath, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldState, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldTaskID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldCreateTime, v))
}

// DevUUIDEQ applies the EQ predicate on the "dev_uuid" field.
func DevUUIDEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldDevUUID, v))
}

// DevUUIDNEQ applies the NEQ predicate on the "dev_uuid" field.
func DevUUIDNEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldDevUUID, v))
}

// DevUUIDIn applies the In predicate on the "dev_uuid" field.
func DevUUIDIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldDevUUID, vs...))
}

// DevUUIDNotIn applies the NotIn predicate on the "dev_uuid" field.
func DevUUIDNotIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldDevUUID, vs...))
}

// DevUUIDGT applies the GT predicate on the "dev_uuid" field.
func DevUUIDGT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldDevUUID, v))
}

// DevUUIDGTE applies the GTE predicate on the "dev_uuid" field.
func DevUUIDGTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldDevUUID, v))
}

// DevUUIDLT applies the LT predicate on the "dev_uuid" field.
func DevUUIDLT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldDevUUID, v))
}

// DevUUIDLTE applies the LTE predicate on the "dev_uuid" field.
func DevUUIDLTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldDevUUID, v))
}

// DevUUIDContains applies the Contains predicate on the "dev_uuid" field.
func DevUUIDContains(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContains(FieldDevUUID, v))
}

// DevUUIDHasPrefix applies the HasPrefix predicate on the "dev_uuid" field.
func DevUUIDHasPrefix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasPrefix(FieldDevUUID, v))
}

// DevUUIDHasSuffix applies the HasSuffix predicate on the "dev_uuid" field.
func DevUUIDHasSuffix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasSuffix(FieldDevUUID, v))
}

// DevUUIDEqualFold applies the EqualFold predicate on the "dev_uuid" field.
func DevUUIDEqualFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEqualFold(FieldDevUUID, v))
}

// DevUUIDContainsFold applies the ContainsFold predicate on the "dev_uuid" field.
func DevUUIDContainsFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContainsFold(FieldDevUUID, v))
}

// LicPathEQ applies the EQ predicate on the "lic_path" field.
func LicPathEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldLicPath, v))
}

// LicPathNEQ applies the NEQ predicate on the "lic_path" field.
func LicPathNEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldLicPath, v))
}

// LicPathIn applies the In predicate on the "lic_path" field.
func LicPathIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldLicPath, vs...))
}

// LicPathNotIn applies the NotIn predicate on the "lic_path" field.
func LicPathNotIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldLicPath, vs...))
}

// LicPathGT applies the GT predicate on the "lic_path" field.
func LicPathGT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldLicPath, v))
}

// LicPathGTE applies the GTE predicate on the "lic_path" field.
func LicPathGTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldLicPath, v))
}

// LicPathLT applies the LT predicate on the "lic_path" field.
func LicPathLT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldLicPath, v))
}

// LicPathLTE applies the LTE predicate on the "lic_path" field.
func LicPathLTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldLicPath, v))
}

// LicPathContains applies the Contains predicate on the "lic_path" field.
func LicPathContains(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContains(FieldLicPath, v))
}

// LicPathHasPrefix applies the HasPrefix predicate on the "lic_path" field.
func LicPathHasPrefix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasPrefix(FieldLicPath, v))
}

// LicPathHasSuffix applies the HasSuffix predicate on the "lic_path" field.
func LicPathHasSuffix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasSuffix(FieldLicPath, v))
}

// LicPathEqualFold applies the EqualFold predicate on the "lic_path" field.
func LicPathEqualFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEqualFold(FieldLicPath, v))
}

// LicPathContainsFold applies the ContainsFold predicate on the "lic_path" field.
func LicPathContainsFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContainsFold(FieldLicPath, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldState, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v string) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...string) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v string) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldTaskID, v))
}

// TaskIDContains applies the Contains predicate on the "task_id" field.
func TaskIDContains(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContains(FieldTaskID, v))
}

// TaskIDHasPrefix applies the HasPrefix predicate on the "task_id" field.
func TaskIDHasPrefix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasPrefix(FieldTaskID, v))
}

// TaskIDHasSuffix applies the HasSuffix predicate on the "task_id" field.
func TaskIDHasSuffix(v string) predicate.Licence {
	return predicate.Licence(sql.FieldHasSuffix(FieldTaskID, v))
}

// TaskIDEqualFold applies the EqualFold predicate on the "task_id" field.
func TaskIDEqualFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldEqualFold(FieldTaskID, v))
}

// TaskIDContainsFold applies the ContainsFold predicate on the "task_id" field.
func TaskIDContainsFold(v string) predicate.Licence {
	return predicate.Licence(sql.FieldContainsFold(FieldTaskID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.Licence {
	return predicate.Licence(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.Licence {
	return predicate.Licence(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.Licence {
	return predicate.Licence(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Licence) predicate.Licence {
	return predicate.Licence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Licence) predicate.Licence {
	return predicate.Licence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Licence) predicate.Licence {
	return predicate.Licence(func(s *sql.Selector) {
		p(s.Not())
	})
}
