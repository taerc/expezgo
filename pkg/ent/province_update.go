// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/city"
	"expezgo/pkg/ent/predicate"
	"expezgo/pkg/ent/province"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProvinceUpdate is the builder for updating Province entities.
type ProvinceUpdate struct {
	config
	hooks     []Hook
	mutation  *ProvinceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProvinceUpdate builder.
func (pu *ProvinceUpdate) Where(ps ...predicate.Province) *ProvinceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProvinceUpdate) SetName(s string) *ProvinceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetType sets the "type" field.
func (pu *ProvinceUpdate) SetType(u uint32) *ProvinceUpdate {
	pu.mutation.ResetType()
	pu.mutation.SetType(u)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableType(u *uint32) *ProvinceUpdate {
	if u != nil {
		pu.SetType(*u)
	}
	return pu
}

// AddType adds u to the "type" field.
func (pu *ProvinceUpdate) AddType(u int32) *ProvinceUpdate {
	pu.mutation.AddType(u)
	return pu
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (pu *ProvinceUpdate) AddCityIDs(ids ...uint32) *ProvinceUpdate {
	pu.mutation.AddCityIDs(ids...)
	return pu
}

// AddCities adds the "cities" edges to the City entity.
func (pu *ProvinceUpdate) AddCities(c ...*City) *ProvinceUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCityIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (pu *ProvinceUpdate) Mutation() *ProvinceMutation {
	return pu.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (pu *ProvinceUpdate) ClearCities() *ProvinceUpdate {
	pu.mutation.ClearCities()
	return pu
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (pu *ProvinceUpdate) RemoveCityIDs(ids ...uint32) *ProvinceUpdate {
	pu.mutation.RemoveCityIDs(ids...)
	return pu
}

// RemoveCities removes "cities" edges to City entities.
func (pu *ProvinceUpdate) RemoveCities(c ...*City) *ProvinceUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProvinceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProvinceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProvinceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProvinceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProvinceUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := province.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Province.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProvinceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProvinceUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProvinceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(province.Table, province.Columns, sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(province.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(province.FieldType, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedType(); ok {
		_spec.AddField(province.FieldType, field.TypeUint32, value)
	}
	if pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProvinceUpdateOne is the builder for updating a single Province entity.
type ProvinceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProvinceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (puo *ProvinceUpdateOne) SetName(s string) *ProvinceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetType sets the "type" field.
func (puo *ProvinceUpdateOne) SetType(u uint32) *ProvinceUpdateOne {
	puo.mutation.ResetType()
	puo.mutation.SetType(u)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableType(u *uint32) *ProvinceUpdateOne {
	if u != nil {
		puo.SetType(*u)
	}
	return puo
}

// AddType adds u to the "type" field.
func (puo *ProvinceUpdateOne) AddType(u int32) *ProvinceUpdateOne {
	puo.mutation.AddType(u)
	return puo
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (puo *ProvinceUpdateOne) AddCityIDs(ids ...uint32) *ProvinceUpdateOne {
	puo.mutation.AddCityIDs(ids...)
	return puo
}

// AddCities adds the "cities" edges to the City entity.
func (puo *ProvinceUpdateOne) AddCities(c ...*City) *ProvinceUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCityIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (puo *ProvinceUpdateOne) Mutation() *ProvinceMutation {
	return puo.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (puo *ProvinceUpdateOne) ClearCities() *ProvinceUpdateOne {
	puo.mutation.ClearCities()
	return puo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (puo *ProvinceUpdateOne) RemoveCityIDs(ids ...uint32) *ProvinceUpdateOne {
	puo.mutation.RemoveCityIDs(ids...)
	return puo
}

// RemoveCities removes "cities" edges to City entities.
func (puo *ProvinceUpdateOne) RemoveCities(c ...*City) *ProvinceUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCityIDs(ids...)
}

// Where appends a list predicates to the ProvinceUpdate builder.
func (puo *ProvinceUpdateOne) Where(ps ...predicate.Province) *ProvinceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProvinceUpdateOne) Select(field string, fields ...string) *ProvinceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Province entity.
func (puo *ProvinceUpdateOne) Save(ctx context.Context) (*Province, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProvinceUpdateOne) SaveX(ctx context.Context) *Province {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProvinceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProvinceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProvinceUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := province.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Province.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProvinceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProvinceUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProvinceUpdateOne) sqlSave(ctx context.Context) (_node *Province, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(province.Table, province.Columns, sqlgraph.NewFieldSpec(province.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Province.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, province.FieldID)
		for _, f := range fields {
			if !province.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != province.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(province.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(province.FieldType, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedType(); ok {
		_spec.AddField(province.FieldType, field.TypeUint32, value)
	}
	if puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Province{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
