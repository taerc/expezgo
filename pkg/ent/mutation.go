// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/licence"
	"expezgo/pkg/ent/predicate"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLicence = "Licence"
)

// LicenceMutation represents an operation that mutates the Licence nodes in the graph.
type LicenceMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	dev_uuid       *string
	lic_path       *string
	state          *int
	addstate       *int
	task_id        *string
	create_time    *int64
	addcreate_time *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Licence, error)
	predicates     []predicate.Licence
}

var _ ent.Mutation = (*LicenceMutation)(nil)

// licenceOption allows management of the mutation configuration using functional options.
type licenceOption func(*LicenceMutation)

// newLicenceMutation creates new mutation for the Licence entity.
func newLicenceMutation(c config, op Op, opts ...licenceOption) *LicenceMutation {
	m := &LicenceMutation{
		config:        c,
		op:            op,
		typ:           TypeLicence,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLicenceID sets the ID field of the mutation.
func withLicenceID(id int64) licenceOption {
	return func(m *LicenceMutation) {
		var (
			err   error
			once  sync.Once
			value *Licence
		)
		m.oldValue = func(ctx context.Context) (*Licence, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Licence.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLicence sets the old Licence of the mutation.
func withLicence(node *Licence) licenceOption {
	return func(m *LicenceMutation) {
		m.oldValue = func(context.Context) (*Licence, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LicenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LicenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Licence entities.
func (m *LicenceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LicenceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LicenceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Licence.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDevUUID sets the "dev_uuid" field.
func (m *LicenceMutation) SetDevUUID(s string) {
	m.dev_uuid = &s
}

// DevUUID returns the value of the "dev_uuid" field in the mutation.
func (m *LicenceMutation) DevUUID() (r string, exists bool) {
	v := m.dev_uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldDevUUID returns the old "dev_uuid" field's value of the Licence entity.
// If the Licence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenceMutation) OldDevUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevUUID: %w", err)
	}
	return oldValue.DevUUID, nil
}

// ResetDevUUID resets all changes to the "dev_uuid" field.
func (m *LicenceMutation) ResetDevUUID() {
	m.dev_uuid = nil
}

// SetLicPath sets the "lic_path" field.
func (m *LicenceMutation) SetLicPath(s string) {
	m.lic_path = &s
}

// LicPath returns the value of the "lic_path" field in the mutation.
func (m *LicenceMutation) LicPath() (r string, exists bool) {
	v := m.lic_path
	if v == nil {
		return
	}
	return *v, true
}

// OldLicPath returns the old "lic_path" field's value of the Licence entity.
// If the Licence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenceMutation) OldLicPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicPath: %w", err)
	}
	return oldValue.LicPath, nil
}

// ResetLicPath resets all changes to the "lic_path" field.
func (m *LicenceMutation) ResetLicPath() {
	m.lic_path = nil
}

// SetState sets the "state" field.
func (m *LicenceMutation) SetState(i int) {
	m.state = &i
	m.addstate = nil
}

// State returns the value of the "state" field in the mutation.
func (m *LicenceMutation) State() (r int, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Licence entity.
// If the Licence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenceMutation) OldState(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds i to the "state" field.
func (m *LicenceMutation) AddState(i int) {
	if m.addstate != nil {
		*m.addstate += i
	} else {
		m.addstate = &i
	}
}

// AddedState returns the value that was added to the "state" field in this mutation.
func (m *LicenceMutation) AddedState() (r int, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ResetState resets all changes to the "state" field.
func (m *LicenceMutation) ResetState() {
	m.state = nil
	m.addstate = nil
}

// SetTaskID sets the "task_id" field.
func (m *LicenceMutation) SetTaskID(s string) {
	m.task_id = &s
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *LicenceMutation) TaskID() (r string, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the Licence entity.
// If the Licence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenceMutation) OldTaskID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *LicenceMutation) ResetTaskID() {
	m.task_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *LicenceMutation) SetCreateTime(i int64) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LicenceMutation) CreateTime() (r int64, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Licence entity.
// If the Licence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenceMutation) OldCreateTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *LicenceMutation) AddCreateTime(i int64) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *LicenceMutation) AddedCreateTime() (r int64, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LicenceMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// Where appends a list predicates to the LicenceMutation builder.
func (m *LicenceMutation) Where(ps ...predicate.Licence) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LicenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LicenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Licence, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LicenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LicenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Licence).
func (m *LicenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LicenceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.dev_uuid != nil {
		fields = append(fields, licence.FieldDevUUID)
	}
	if m.lic_path != nil {
		fields = append(fields, licence.FieldLicPath)
	}
	if m.state != nil {
		fields = append(fields, licence.FieldState)
	}
	if m.task_id != nil {
		fields = append(fields, licence.FieldTaskID)
	}
	if m.create_time != nil {
		fields = append(fields, licence.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LicenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case licence.FieldDevUUID:
		return m.DevUUID()
	case licence.FieldLicPath:
		return m.LicPath()
	case licence.FieldState:
		return m.State()
	case licence.FieldTaskID:
		return m.TaskID()
	case licence.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LicenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case licence.FieldDevUUID:
		return m.OldDevUUID(ctx)
	case licence.FieldLicPath:
		return m.OldLicPath(ctx)
	case licence.FieldState:
		return m.OldState(ctx)
	case licence.FieldTaskID:
		return m.OldTaskID(ctx)
	case licence.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Licence field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case licence.FieldDevUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevUUID(v)
		return nil
	case licence.FieldLicPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicPath(v)
		return nil
	case licence.FieldState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case licence.FieldTaskID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case licence.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Licence field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LicenceMutation) AddedFields() []string {
	var fields []string
	if m.addstate != nil {
		fields = append(fields, licence.FieldState)
	}
	if m.addcreate_time != nil {
		fields = append(fields, licence.FieldCreateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LicenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case licence.FieldState:
		return m.AddedState()
	case licence.FieldCreateTime:
		return m.AddedCreateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case licence.FieldState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddState(v)
		return nil
	case licence.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Licence numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LicenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LicenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LicenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Licence nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LicenceMutation) ResetField(name string) error {
	switch name {
	case licence.FieldDevUUID:
		m.ResetDevUUID()
		return nil
	case licence.FieldLicPath:
		m.ResetLicPath()
		return nil
	case licence.FieldState:
		m.ResetState()
		return nil
	case licence.FieldTaskID:
		m.ResetTaskID()
		return nil
	case licence.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Licence field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LicenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LicenceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LicenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LicenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LicenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LicenceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LicenceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Licence unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LicenceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Licence edge %s", name)
}
