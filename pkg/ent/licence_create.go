// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/licence"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenceCreate is the builder for creating a Licence entity.
type LicenceCreate struct {
	config
	mutation *LicenceMutation
	hooks    []Hook
}

// SetDevUUID sets the "dev_uuid" field.
func (lc *LicenceCreate) SetDevUUID(s string) *LicenceCreate {
	lc.mutation.SetDevUUID(s)
	return lc
}

// SetLicPath sets the "lic_path" field.
func (lc *LicenceCreate) SetLicPath(s string) *LicenceCreate {
	lc.mutation.SetLicPath(s)
	return lc
}

// SetState sets the "state" field.
func (lc *LicenceCreate) SetState(i int) *LicenceCreate {
	lc.mutation.SetState(i)
	return lc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (lc *LicenceCreate) SetNillableState(i *int) *LicenceCreate {
	if i != nil {
		lc.SetState(*i)
	}
	return lc
}

// SetTaskID sets the "task_id" field.
func (lc *LicenceCreate) SetTaskID(s string) *LicenceCreate {
	lc.mutation.SetTaskID(s)
	return lc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (lc *LicenceCreate) SetNillableTaskID(s *string) *LicenceCreate {
	if s != nil {
		lc.SetTaskID(*s)
	}
	return lc
}

// SetCreateTime sets the "create_time" field.
func (lc *LicenceCreate) SetCreateTime(i int64) *LicenceCreate {
	lc.mutation.SetCreateTime(i)
	return lc
}

// SetID sets the "id" field.
func (lc *LicenceCreate) SetID(i int64) *LicenceCreate {
	lc.mutation.SetID(i)
	return lc
}

// Mutation returns the LicenceMutation object of the builder.
func (lc *LicenceCreate) Mutation() *LicenceMutation {
	return lc.mutation
}

// Save creates the Licence in the database.
func (lc *LicenceCreate) Save(ctx context.Context) (*Licence, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LicenceCreate) SaveX(ctx context.Context) *Licence {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LicenceCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LicenceCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LicenceCreate) defaults() {
	if _, ok := lc.mutation.State(); !ok {
		v := licence.DefaultState
		lc.mutation.SetState(v)
	}
	if _, ok := lc.mutation.TaskID(); !ok {
		v := licence.DefaultTaskID
		lc.mutation.SetTaskID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LicenceCreate) check() error {
	if _, ok := lc.mutation.DevUUID(); !ok {
		return &ValidationError{Name: "dev_uuid", err: errors.New(`ent: missing required field "Licence.dev_uuid"`)}
	}
	if v, ok := lc.mutation.DevUUID(); ok {
		if err := licence.DevUUIDValidator(v); err != nil {
			return &ValidationError{Name: "dev_uuid", err: fmt.Errorf(`ent: validator failed for field "Licence.dev_uuid": %w`, err)}
		}
	}
	if _, ok := lc.mutation.LicPath(); !ok {
		return &ValidationError{Name: "lic_path", err: errors.New(`ent: missing required field "Licence.lic_path"`)}
	}
	if v, ok := lc.mutation.LicPath(); ok {
		if err := licence.LicPathValidator(v); err != nil {
			return &ValidationError{Name: "lic_path", err: fmt.Errorf(`ent: validator failed for field "Licence.lic_path": %w`, err)}
		}
	}
	if _, ok := lc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Licence.state"`)}
	}
	if _, ok := lc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "Licence.task_id"`)}
	}
	if v, ok := lc.mutation.TaskID(); ok {
		if err := licence.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "Licence.task_id": %w`, err)}
		}
	}
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Licence.create_time"`)}
	}
	return nil
}

func (lc *LicenceCreate) sqlSave(ctx context.Context) (*Licence, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LicenceCreate) createSpec() (*Licence, *sqlgraph.CreateSpec) {
	var (
		_node = &Licence{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(licence.Table, sqlgraph.NewFieldSpec(licence.FieldID, field.TypeInt64))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.DevUUID(); ok {
		_spec.SetField(licence.FieldDevUUID, field.TypeString, value)
		_node.DevUUID = value
	}
	if value, ok := lc.mutation.LicPath(); ok {
		_spec.SetField(licence.FieldLicPath, field.TypeString, value)
		_node.LicPath = value
	}
	if value, ok := lc.mutation.State(); ok {
		_spec.SetField(licence.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := lc.mutation.TaskID(); ok {
		_spec.SetField(licence.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(licence.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// LicenceCreateBulk is the builder for creating many Licence entities in bulk.
type LicenceCreateBulk struct {
	config
	builders []*LicenceCreate
}

// Save creates the Licence entities in the database.
func (lcb *LicenceCreateBulk) Save(ctx context.Context) ([]*Licence, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Licence, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LicenceCreateBulk) SaveX(ctx context.Context) []*Licence {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LicenceCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LicenceCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
