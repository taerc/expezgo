// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expezgo/pkg/ent/licence"
	"expezgo/pkg/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenceUpdate is the builder for updating Licence entities.
type LicenceUpdate struct {
	config
	hooks     []Hook
	mutation  *LicenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LicenceUpdate builder.
func (lu *LicenceUpdate) Where(ps ...predicate.Licence) *LicenceUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetDevUUID sets the "dev_uuid" field.
func (lu *LicenceUpdate) SetDevUUID(s string) *LicenceUpdate {
	lu.mutation.SetDevUUID(s)
	return lu
}

// SetLicPath sets the "lic_path" field.
func (lu *LicenceUpdate) SetLicPath(s string) *LicenceUpdate {
	lu.mutation.SetLicPath(s)
	return lu
}

// SetState sets the "state" field.
func (lu *LicenceUpdate) SetState(i int) *LicenceUpdate {
	lu.mutation.ResetState()
	lu.mutation.SetState(i)
	return lu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (lu *LicenceUpdate) SetNillableState(i *int) *LicenceUpdate {
	if i != nil {
		lu.SetState(*i)
	}
	return lu
}

// AddState adds i to the "state" field.
func (lu *LicenceUpdate) AddState(i int) *LicenceUpdate {
	lu.mutation.AddState(i)
	return lu
}

// SetTaskID sets the "task_id" field.
func (lu *LicenceUpdate) SetTaskID(s string) *LicenceUpdate {
	lu.mutation.SetTaskID(s)
	return lu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (lu *LicenceUpdate) SetNillableTaskID(s *string) *LicenceUpdate {
	if s != nil {
		lu.SetTaskID(*s)
	}
	return lu
}

// SetCreateTime sets the "create_time" field.
func (lu *LicenceUpdate) SetCreateTime(i int64) *LicenceUpdate {
	lu.mutation.ResetCreateTime()
	lu.mutation.SetCreateTime(i)
	return lu
}

// AddCreateTime adds i to the "create_time" field.
func (lu *LicenceUpdate) AddCreateTime(i int64) *LicenceUpdate {
	lu.mutation.AddCreateTime(i)
	return lu
}

// Mutation returns the LicenceMutation object of the builder.
func (lu *LicenceUpdate) Mutation() *LicenceMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LicenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LicenceUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LicenceUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LicenceUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LicenceUpdate) check() error {
	if v, ok := lu.mutation.DevUUID(); ok {
		if err := licence.DevUUIDValidator(v); err != nil {
			return &ValidationError{Name: "dev_uuid", err: fmt.Errorf(`ent: validator failed for field "Licence.dev_uuid": %w`, err)}
		}
	}
	if v, ok := lu.mutation.LicPath(); ok {
		if err := licence.LicPathValidator(v); err != nil {
			return &ValidationError{Name: "lic_path", err: fmt.Errorf(`ent: validator failed for field "Licence.lic_path": %w`, err)}
		}
	}
	if v, ok := lu.mutation.TaskID(); ok {
		if err := licence.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "Licence.task_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LicenceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LicenceUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LicenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(licence.Table, licence.Columns, sqlgraph.NewFieldSpec(licence.FieldID, field.TypeInt64))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.DevUUID(); ok {
		_spec.SetField(licence.FieldDevUUID, field.TypeString, value)
	}
	if value, ok := lu.mutation.LicPath(); ok {
		_spec.SetField(licence.FieldLicPath, field.TypeString, value)
	}
	if value, ok := lu.mutation.State(); ok {
		_spec.SetField(licence.FieldState, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedState(); ok {
		_spec.AddField(licence.FieldState, field.TypeInt, value)
	}
	if value, ok := lu.mutation.TaskID(); ok {
		_spec.SetField(licence.FieldTaskID, field.TypeString, value)
	}
	if value, ok := lu.mutation.CreateTime(); ok {
		_spec.SetField(licence.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedCreateTime(); ok {
		_spec.AddField(licence.FieldCreateTime, field.TypeInt64, value)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LicenceUpdateOne is the builder for updating a single Licence entity.
type LicenceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LicenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDevUUID sets the "dev_uuid" field.
func (luo *LicenceUpdateOne) SetDevUUID(s string) *LicenceUpdateOne {
	luo.mutation.SetDevUUID(s)
	return luo
}

// SetLicPath sets the "lic_path" field.
func (luo *LicenceUpdateOne) SetLicPath(s string) *LicenceUpdateOne {
	luo.mutation.SetLicPath(s)
	return luo
}

// SetState sets the "state" field.
func (luo *LicenceUpdateOne) SetState(i int) *LicenceUpdateOne {
	luo.mutation.ResetState()
	luo.mutation.SetState(i)
	return luo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (luo *LicenceUpdateOne) SetNillableState(i *int) *LicenceUpdateOne {
	if i != nil {
		luo.SetState(*i)
	}
	return luo
}

// AddState adds i to the "state" field.
func (luo *LicenceUpdateOne) AddState(i int) *LicenceUpdateOne {
	luo.mutation.AddState(i)
	return luo
}

// SetTaskID sets the "task_id" field.
func (luo *LicenceUpdateOne) SetTaskID(s string) *LicenceUpdateOne {
	luo.mutation.SetTaskID(s)
	return luo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (luo *LicenceUpdateOne) SetNillableTaskID(s *string) *LicenceUpdateOne {
	if s != nil {
		luo.SetTaskID(*s)
	}
	return luo
}

// SetCreateTime sets the "create_time" field.
func (luo *LicenceUpdateOne) SetCreateTime(i int64) *LicenceUpdateOne {
	luo.mutation.ResetCreateTime()
	luo.mutation.SetCreateTime(i)
	return luo
}

// AddCreateTime adds i to the "create_time" field.
func (luo *LicenceUpdateOne) AddCreateTime(i int64) *LicenceUpdateOne {
	luo.mutation.AddCreateTime(i)
	return luo
}

// Mutation returns the LicenceMutation object of the builder.
func (luo *LicenceUpdateOne) Mutation() *LicenceMutation {
	return luo.mutation
}

// Where appends a list predicates to the LicenceUpdate builder.
func (luo *LicenceUpdateOne) Where(ps ...predicate.Licence) *LicenceUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LicenceUpdateOne) Select(field string, fields ...string) *LicenceUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Licence entity.
func (luo *LicenceUpdateOne) Save(ctx context.Context) (*Licence, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LicenceUpdateOne) SaveX(ctx context.Context) *Licence {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LicenceUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LicenceUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LicenceUpdateOne) check() error {
	if v, ok := luo.mutation.DevUUID(); ok {
		if err := licence.DevUUIDValidator(v); err != nil {
			return &ValidationError{Name: "dev_uuid", err: fmt.Errorf(`ent: validator failed for field "Licence.dev_uuid": %w`, err)}
		}
	}
	if v, ok := luo.mutation.LicPath(); ok {
		if err := licence.LicPathValidator(v); err != nil {
			return &ValidationError{Name: "lic_path", err: fmt.Errorf(`ent: validator failed for field "Licence.lic_path": %w`, err)}
		}
	}
	if v, ok := luo.mutation.TaskID(); ok {
		if err := licence.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "Licence.task_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LicenceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LicenceUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LicenceUpdateOne) sqlSave(ctx context.Context) (_node *Licence, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(licence.Table, licence.Columns, sqlgraph.NewFieldSpec(licence.FieldID, field.TypeInt64))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Licence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licence.FieldID)
		for _, f := range fields {
			if !licence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != licence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.DevUUID(); ok {
		_spec.SetField(licence.FieldDevUUID, field.TypeString, value)
	}
	if value, ok := luo.mutation.LicPath(); ok {
		_spec.SetField(licence.FieldLicPath, field.TypeString, value)
	}
	if value, ok := luo.mutation.State(); ok {
		_spec.SetField(licence.FieldState, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedState(); ok {
		_spec.AddField(licence.FieldState, field.TypeInt, value)
	}
	if value, ok := luo.mutation.TaskID(); ok {
		_spec.SetField(licence.FieldTaskID, field.TypeString, value)
	}
	if value, ok := luo.mutation.CreateTime(); ok {
		_spec.SetField(licence.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedCreateTime(); ok {
		_spec.AddField(licence.FieldCreateTime, field.TypeInt64, value)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Licence{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
